def send_bits(bits):
    tip = 1
    ring = 1j
    tb = 0
    for bit in bits:
        if type(bit) == type((1,2)):
            if bit[0] == "wait":
                for i in range(bit[1]):
                    yield 1+1j-(tb*tip+(not bit)*ring)
            if bit[0] == "zeros":
                for i in range(bit[1]):
                    yield 1+1j-(tb*tip+(not 0)*ring) #dc restoration
                    yield 1+1j-(tb*tip+0*ring)
                    tb = not tb
                    yield 1+1j-(tb*tip+0*ring)
                    yield 1+1j-(tb*tip+(not 0)*ring) #dc restoration

        else:
            yield 1+1j-(tb*tip+(not bit)*ring) #dc restoration
            yield 1+1j-(tb*tip+bit*ring)
            tb = not tb
            yield 1+1j-(tb*tip+bit*ring)
            yield 1+1j-(tb*tip+(not bit)*ring) #dc restoration
def to_bitstream(dat):
    for i in range(16):#sync pulse
        yield 0
    for d in dat:
        if type(d) == type((1,2)):
            yield d
        else:
            yield 1
            for i in range(8):
                yield ((1<<i)&d)>0

def transfer(dat,n=96000//1024):
    for i in send_bits(to_bitstream(dat)):
        for j in range(n):
            yield i

    
graphic_bootstrap = "F33E01D310CD0B003E20D310CD0B003E05D310AFD300060648210F9E1EAACDF39D7ABE2806210F9E4118F3230520EFCDF39D4A41CDF39D72237A814F10F6C0E536ED2336B02336C323369523369D2B2B2B11159E37ED52444DEB11959DC91600DB00AB1F3808DB04CB5F20F4E1C9CB0BAB1FCB1A30EA7AD311C953746172743A"

save_prog_bootstrap = "F33E01D310CD0B003E20D310CD0B003E05D310AFD300060A48210E9E1EAACDF29D7ABE2806210E9E4118F3230520EF060821199ECDF29D7223101721189ED5E7D1CDF29D6ACDF29D62D5E5EF3943C1EB23D1CDF29D23720B78B120F6C91600DB00AB1F3808DB04CB5F20F4E1C9CB0BAB1FCB1A30EA7AD311C9537461727450726F673A050000000000000000"

save_prog_ramcode_bootstrap = "F3ED73CC813E01D32011DC81CD448121E3810605CD8A8111F781010A00CD628121F681E72AFF81EF3943D511E981CD448121F0810605CD8A81ED4BFF81D11313CD6281C9210002224B84EBEF0A45F33E01D310CD0B003E20D310CD0B003E05D310C904210000CDA0811213856F3001240D20F310F1CDA081BD2007CDA081BC2001C911CE81CD4481183A48545DCDA081BE280541626B18F52310F23E21D310C9D516001EAADB00AB1F3808DB04CB5F20F41811CB0BAB1FCB1A30EA7B32A4817AD311D1C9ED7BCC81AFD300C900006572723A20636865636B73756D0052656164793A204E616D653A0052656164793A20504461743A0005"
#                                                                                 504461743a

big_bootstrap_prog = "F3AFD300060848211C9E1EAACD039E7ABE2806211C9E4118F3230520EFCD039E4204CD039E4A0CCD039E722310F90D20F6CD039E4ACD039E42E536ED2336B02336C323369523369D2B2B2B11249E37ED52E5D5E56069C11A13856F3001240B78B120F47CB5E111959DC1B7C8E1C91600DB00AB1F3808DB04CB5F20F4E1C9CB0BAB1FCB1A30EAC942696750726F673A"

def bootDat(hexStr,start = "Start:"):
    #hexStr += "00"
    assert len(hexStr)%2 == 0
    l = (len(hexStr)//2)+1
    assert l<=256
    byts = [l]+[int(hexStr[i*2:i*2+2],16) for i in range(l-1)]
    byts += [(-sum(byts))%256] #checksum
    return [ord(c) for c in start]+byts+[0]

def bootstrap(hexStr,dupe=96,start="Start:"):
    for i in transfer(bootDat(hexStr,start),dupe):
        yield i
        
def big_bootstrap(hexStr,dupe=96,start="BigProg:"):
    assert len(hexStr)%2 == 0
    l = (len(hexStr)//2)
    assert l<3700
    byts = [int(hexStr[i*2:i*2+2],16) for i in range(l)]
    checksum = (-sum(byts))%65536
    byts += [checksum%256,checksum//256]
    for i in transfer([0]*16+[ord(c) for c in start]+[l%256,l//256]+byts,dupe):
        yield i

def two_byte_checksummed(dat):
    return dat+[sum(dat)%256,sum(dat)//256]
def send_prog(name,contents,dupe=96,w1=256,w2=256):
    assert len(name) <= 8
    nameDat = ([ord(i) for i in name] + [0]*8)[:8]
    contentsDat = [ord(i) for i in contents]
    lenContents = len(contentsDat)
    namePacket = [ord(i) for i in "Name:"]+two_byte_checksummed(nameDat+[lenContents%256,lenContents//256])
    datPacket = [ord(i) for i in "PDat:"]+two_byte_checksummed(contentsDat)
    spacer = [0xaa,0x55]*4
    dat = bootDat(save_prog_ramcode_bootstrap,"Code:") + [("zeros",w1)] +spacer+ namePacket+ [("zeros",w2)]+spacer+datPacket+spacer
    for i in transfer(dat,dupe):
        yield i

    
def load(hexStr,dupe=96,forceBig=0):
    assert len(hexStr)%2 == 0
    l = (len(hexStr)//2)
    if l < 250 and not forceBig:
        for i in bootstrap(hexStr,dupe):
            yield i
    else:
        for i in bootstrap(big_bootstrap_prog,dupe):
            yield i
        for i in range(dupe*50):
            yield 0
        for i in big_bootstrap(hexStr,dupe):
            yield i


audioProg
